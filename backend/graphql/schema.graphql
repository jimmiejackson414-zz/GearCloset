"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

type Query {
    me: User @auth(guard: "api")
    users: [User!]! @paginate(defaultCount: 10)
    user(id: ID @eq): User @find

    forumCategories: [ForumCategory!]! @all
    forumCategory(id: ID @eq): ForumCategory @find

    forumSubcategories: [ForumSubcategory!]! @all
    forumSubcategory(id: ID @eq): ForumSubcategory @find
    forumSubcategoryBySlug(slug: String! @eq): ForumSubcategory

    forumPosts: [ForumPost!]! @all
    forumPost(id: ID @eq): ForumPost @find
    forumPostBySlug(slug: String! @eq): ForumPost

    forumComments: [ForumComment!]! @all
    forumComment(id: ID @eq): ForumComment @find

    packs: [Pack!]! @field(resolver: "PacksQuery@find_by_user")
    categories: [Category!]! @field(resolver: "CategoriesQuery@find_by_user")
    items: [Item!]! @field(resolver: "ItemsQuery@find_by_user")
    notifications: [Notification!]! @field(resolver: "NotificationQuery@find_by_user")
}

type Mutation {
    login(
        email: String! @rules(apply: ["email"])
        password: String!
    ): LoginUserPayload @field(resolver: "AuthMutator@login")
    register(
        email: String! @rules(apply: ["email", "unique:users"])
        first_name: String!
        last_name: String!
        password: String! @bcrypt
    ): CreateUserPayload @field(resolver: "UserMutator@create")
    updateUser(
        id: ID!
        email: String @rules(apply: ["email", "unique:users"])
        password: String @bcrypt
        avatar_url: String
        first_name: String
        last_name: String
        trail_name: String
        address_1: String
        address_2: String
        city: String
        state: String
        country: String
        subscription_level: String
        measuring_system: String
    ): User @update
}

input OrderByClause {
    columns: String!
    order: SortOrder!
}

enum SortOrder {
    ASC
    DESC
}

#import user/*.graphql
#import content/*.graphql
#import forum/*.graphql