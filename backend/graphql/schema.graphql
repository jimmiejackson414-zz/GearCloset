"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

type Query {
    me: User @auth(guard: "api")
    users: [User!]! @paginate(defaultCount: 10)
    user(id: ID @eq): User @find

    forumCategories: [ForumCategory!]! @all
    forumCategory(id: ID @eq): ForumCategory @find

    forumSubcategories: [ForumSubcategory!]! @all
    forumSubcategory(id: ID @eq): ForumSubcategory @find
    forumSubcategoryBySlug(slug: String! @eq): ForumSubcategory

    forumPosts: [ForumPost!]! @all
    forumPost(id: ID @eq): ForumPost @find
    forumPostBySlug(slug: String! @eq): ForumPost

    forumComments: [ForumComment!]! @all
    forumComment(id: ID @eq): ForumComment @find

    packs: [Pack!]! @field(resolver: "PacksQuery@find_by_user")
    categories: [Category!]! @field(resolver: "CategoriesQuery@find_by_user")
    items: [Item!]! @field(resolver: "ItemsQuery@find_by_user")
    notifications: [Notification!]! @field(resolver: "NotificationQuery@find_by_user")
}

type Mutation {
    login(
        email: String! @rules(apply: ["email"])
        password: String!
    ): LoginUserPayload @field(resolver: "AuthMutator@login")
    register(
        email: String! @rules(apply: ["email", "unique:users"])
        first_name: String!
        last_name: String!
        password: String! @bcrypt
    ): CreateUserPayload @field(resolver: "UserMutator@create")
}

type LoginUserPayload {
    me: User
    token: String
}

type CreateUserPayload {
    me: User
    token: String
}

type User {
    id: ID!
    api_token: String!
    email: String!
    password: String!
    avatar_url: String!
    address_1: String!
    address_2: String!
    city: String!
    state: String!
    country: String!
    first_name: String!
    last_name: String!
    trail_name: String!
    subscription_level: String!
    measuring_system: String!
    created_at: DateTime!
    updated_at: DateTime!

    packs: [Pack!]! @hasMany
    notifications: [Notification!]! @hasMany
}

type Notification {
    id: ID!
    message: String!
    viewed: Boolean!
    created_at: DateTime!
    updated_at: DateTime!

    user: User @belongsTo
}

type ForumCategory {
    id: ID!
    title: String!
    description: String!
    slug: String!
    created_at: DateTime!
    updated_at: DateTime!

    subcategories: [ForumSubcategory!]! @hasMany
}

type ForumSubcategory {
    id: ID!
    title: String!
    slug: String!
    created_at: DateTime!
    updated_at: DateTime!

    postCount: Int! @count(relation: "posts")

    category: ForumCategory! @belongsTo
    posts: [ForumPost!]! @hasMany
}

type ForumPost {
    id: ID!
    title: String!
    pinned: Boolean!
    slug: String!
    created_at: DateTime!
    updated_at: DateTime!

    commentCount: Int! @count(relation: "comments")

    comments: [ForumComment!]! @hasMany
    subcategory: ForumSubcategory! @belongsTo
    user: User! @belongsTo
}

type ForumComment {
    id: ID!
    text: String!
    created_at: DateTime!
    updated_at: DateTime!

    post: ForumPost! @belongsTo
    user: User! @belongsTo
}

type Pack {
    id: ID!
    name: String!
    active: Boolean!
    created_at: DateTime!
    updated_at: DateTime!

    categories: [Category!]! @hasMany
    user: User! @belongsTo
}

type Category {
    id: ID!
    name: String!
    created_at: DateTime!
    updated_at: DateTime!

    pack: Pack! @belongsTo
    category_items: [CategoryItem!]! @hasMany
    items: [Item!]! @hasMany
}

type CategoryItem {
    id: ID!
    position: Int!
    created_at: DateTime!
    updated_at: DateTime!

    category: Category @belongsTo
    item: Item @belongsTo
}

type Item {
    id: ID!
    name: String
    weight: Float
    price: Int
    generic_type: String
    consumable: Boolean
    worn: Boolean
    quantity: Int
    created_at: DateTime!
    updated_at: DateTime!

    category: Category! @belongsTo
}
